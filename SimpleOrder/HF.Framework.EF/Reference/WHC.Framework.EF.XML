<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WHC.Framework.EF</name>
    </assembly>
    <members>
        <member name="T:WHC.Framework.EF.ContextExtensions">
            <summary>
            DbContext扩展类函数，方便获得对象的表名称
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.ContextExtensions.GetTableName``1(System.Data.Entity.DbContext)">
            <summary>
            获取对象的表名称
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.ContextExtensions.GetTableName``1(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            获取对象的表名称
            </summary>
        </member>
        <member name="T:WHC.Framework.EF.LamdaExpressionExtension">
            <summary>
            Lamda-Expression表达式的扩展类，方便组合多个条件。
            如两个表达式条件可以组合为AND或者OR条件方式。
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.LamdaExpressionExtension.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            使用AND条件组合两个表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">表达式1</param>
            <param name="second">表达式2</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.LamdaExpressionExtension.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            使用OR条件组合两个表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">表达式1</param>
            <param name="second">表达式2</param>
            <returns></returns>
        </member>
        <member name="T:WHC.Framework.EF.ParameterRebinder">
            <summary>
            重定义表达式树的访问者类
            </summary>
        </member>
        <member name="T:WHC.Framework.EF.BaseWCFService`2">
            <summary>
            基于WCF数据访问方式的基础API包装类
            </summary>
            <typeparam name="DTO">数据传输对象，用于界面处理层</typeparam>
            <typeparam name="Entity">数据实体对象，用于数据存储</typeparam>
        </member>
        <member name="T:WHC.Framework.EF.IBaseService`2">
            <summary>
            基于Facade业务模式定义的接口，可以使用WCF、传统本地访问等模式进行获取数据的公共接口
            </summary>
            <typeparam name="DTO">数据传输对象，用于界面处理层</typeparam>
            <typeparam name="Entity">数据实体对象，用于数据存储</typeparam>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.Insert(`0)">
            <summary>
            插入指定对象到数据库中
            </summary>
            <param name="dto">指定的对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.InsertAsync(`0)">
            <summary>
            插入指定对象到数据库中（异步）
            </summary>
            <param name="dto">指定的对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.InsertRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入指定对象集合到数据库中
            </summary>
            <param name="list">指定的对象集合</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.InsertRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入指定对象集合到数据库中（异步）
            </summary>
            <param name="list">指定的对象集合</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.Update(`0,System.Object)">
            <summary>
            更新对象属性到数据库中
            </summary>
            <param name="dto">指定的对象</param>
            <param name="key">主键的值</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.UpdateAsync(`0,System.Object)">
            <summary>
            更新对象属性到数据库中（异步）
            </summary>
            <param name="dto">指定的对象</param>
            <param name="key">主键的值</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.Delete(System.Object)">
            <summary>
            根据指定对象的ID,从数据库中删除指定对象
            </summary>
            <param name="id">对象的ID</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.DeleteAsync(System.Object)">
            <summary>
            根据指定对象的ID,从数据库中删除指定对象（异步）
            </summary>
            <param name="id">对象的ID</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.Delete(`0)">
            <summary>
            从数据库中删除指定对象
            </summary>
            <param name="dto">指定对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.DeleteAsync(`0)">
            <summary>
            从数据库中删除指定对象（异步）
            </summary>
            <param name="dto">条件表达式</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.DeleteByExpression(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据指定条件,从数据库中删除指定对象
            </summary>
            <param name="match">条件表达式</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.DeleteByExpressionAsync(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据指定条件,从数据库中删除指定对象（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.DeleteByCondition(System.String)">
            <summary>
            根据指定条件,从数据库中删除指定对象
            </summary>
            <param name="condition">删除记录的条件语句</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.DeleteByConditionAsync(System.String)">
            <summary>
            根据指定条件,从数据库中删除指定对象（异步）
            </summary>
            <param name="condition">删除记录的条件语句</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.FindByID(System.Object)">
            <summary>
            查询数据库,返回指定ID的对象
            </summary>
            <param name="id">ID主键的值</param>
            <returns>存在则返回指定的对象,否则返回Null</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.FindByIDAsync(System.Object)">
            <summary>
            查询数据库,返回指定ID的对象（异步）
            </summary>
            <param name="id">ID主键的值</param>
            <returns>存在则返回指定的对象,否则返回Null</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.FindSingle(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件查询数据库,如果存在返回第一个对象
            </summary>
            <param name="match">条件表达式</param>
            <returns>存在则返回指定的第一个对象,否则返回默认值</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.FindSingleAsync(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件查询数据库,如果存在返回第一个对象（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns>存在则返回指定的第一个对象,否则返回默认值</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.GetAll">
            <summary>
            返回数据库所有的对象集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.GetAllAsync">
            <summary>
            返回数据库所有的对象集合（异步）
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.GetAllWithPager(WHC.Pager.Entity.PagerInfo@)">
            <summary>
            返回数据库所有的对象集合(用于分页数据显示)
            </summary>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.Find(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件查询数据库,并返回对象集合
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.FindAsync(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件查询数据库,并返回对象集合(异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.FindWithPager(Serialize.Linq.Nodes.ExpressionNode,WHC.Pager.Entity.PagerInfo@)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="match">条件表达式</param>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.GetRecordCount">
            <summary>
            获取表的所有记录数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.GetRecordCountAsync">
            <summary>
            获取表的所有记录数量（异步）
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.GetRecordCount(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件获取表记录的数量
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.GetRecordCountAsync(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件获取表记录的数量（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.IsExistRecord(System.Object)">
            <summary>
            根据主键ID，判断是否存在记录
            </summary>
            <param name="id">对象的ID</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.IsExistRecordAsyn(System.Object)">
            <summary>
            根据主键ID，判断是否存在记录（异步）
            </summary>
            <param name="id">对象的ID</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.IsExistRecord(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据查询条件，判断是否存在记录
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.IsExistRecordAsyn(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据查询条件，判断是否存在记录（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.GetFieldTypeList">
            <summary>
            获取表的字段名称和数据类型列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.GetColumnNameAlias">
            <summary>
            获取字段中文别名（用于界面显示）的字典集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.GetFieldList(System.String)">
            <summary>
            获取某字段数据字典列表
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseService`2.GetReportData(System.String,System.String)">
            <summary>
            获取指定字段的报表数据
            </summary>
            <param name="fieldName">表字段</param>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="F:WHC.Framework.EF.BaseWCFService`2.configurationPath">
            <summary>
            WCF配置文件, 默认为"WcfConfig.config"
            </summary>
        </member>
        <member name="F:WHC.Framework.EF.BaseWCFService`2.endpointConfigurationName">
            <summary>
            服务配置节点,在子类中配置
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.#ctor(System.String,System.String)">
            <summary>
            使用自定义终结点配置
            </summary>
            <param name="endpointConfigurationName">终结点配置项名称</param>
            <param name="configurationPath">配置路径</param>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.CreateClient">
            <summary>
            子类构造一个ChannelFactory，方便给基类进行调用通用的API
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.ConvertExpression(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            转换DTO的条件表达式为EF的数据条件表达式
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.Insert(`0)">
            <summary>
            插入指定对象到数据库中
            </summary>
            <param name="dto">指定的对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.InsertAsync(`0)">
            <summary>
            插入指定对象到数据库中（异步）
            </summary>
            <param name="dto">指定的对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.InsertRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入指定对象集合到数据库中
            </summary>
            <param name="list">指定的对象集合</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.InsertRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入指定对象集合到数据库中（异步）
            </summary>
            <param name="list">指定的对象集合</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.Update(`0,System.Object)">
            <summary>
            更新对象属性到数据库中
            </summary>
            <param name="dto">指定的对象</param>
            <param name="key">主键的值</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.UpdateAsync(`0,System.Object)">
            <summary>
            更新对象属性到数据库中（异步）
            </summary>
            <param name="dto">指定的对象</param>
            <param name="key">主键的值</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.Delete(System.Object)">
            <summary>
            根据指定对象的ID,从数据库中删除指定对象
            </summary>
            <param name="id">对象的ID</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.DeleteAsync(System.Object)">
            <summary>
            根据指定对象的ID,从数据库中删除指定对象（异步）
            </summary>
            <param name="id">对象的ID</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.Delete(`0)">
            <summary>
            从数据库中删除指定对象
            </summary>
            <param name="dto">指定对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.DeleteAsync(`0)">
            <summary>
            从数据库中删除指定对象（异步）
            </summary>
            <param name="dto">指定对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.DeleteByExpression(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据指定条件,从数据库中删除指定对象
            </summary>
            <param name="match">条件表达式</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.DeleteByExpressionAsync(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据指定条件,从数据库中删除指定对象（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.DeleteByCondition(System.String)">
            <summary>
            根据指定条件,从数据库中删除指定对象
            </summary>
            <param name="condition">删除记录的条件语句</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.DeleteByConditionAsync(System.String)">
            <summary>
            根据指定条件,从数据库中删除指定对象（异步）
            </summary>
            <param name="condition">删除记录的条件语句</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.FindByID(System.Object)">
            <summary>
            查询数据库,返回指定ID的对象
            </summary>
            <param name="id">ID主键的值</param>
            <returns>存在则返回指定的对象,否则返回Null</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.FindByIDAsync(System.Object)">
            <summary>
            查询数据库,返回指定ID的对象（异步）
            </summary>
            <param name="id">ID主键的值</param>
            <returns>存在则返回指定的对象,否则返回Null</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.FindSingle(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件查询数据库,如果存在返回第一个对象
            </summary>
            <param name="match">条件表达式</param>
            <returns>存在则返回指定的第一个对象,否则返回默认值</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.FindSingleAsync(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件查询数据库,如果存在返回第一个对象（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns>存在则返回指定的第一个对象,否则返回默认值</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.GetAll">
            <summary>
            返回数据库所有的对象集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.GetAllAsync">
            <summary>
            返回数据库所有的对象集合（异步）
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.GetAllWithPager(WHC.Pager.Entity.PagerInfo@)">
            <summary>
            返回数据库所有的对象集合(用于分页数据显示)
            </summary>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.Find(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件查询数据库,并返回对象集合
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.FindAsync(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件查询数据库,并返回对象集合(异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.FindWithPager(Serialize.Linq.Nodes.ExpressionNode,WHC.Pager.Entity.PagerInfo@)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="match">条件表达式</param>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.GetRecordCount">
            <summary>
            获取表的所有记录数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.GetRecordCountAsync">
            <summary>
            获取表的所有记录数量（异步）
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.GetRecordCount(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件获取表记录的数量
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.GetRecordCountAsync(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件获取表记录的数量（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.IsExistRecord(System.Object)">
            <summary>
            根据主键ID，判断是否存在记录
            </summary>
            <param name="id">对象的ID</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.IsExistRecordAsyn(System.Object)">
            <summary>
            根据主键ID，判断是否存在记录（异步）
            </summary>
            <param name="id">对象的ID</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.IsExistRecord(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据查询条件，判断是否存在记录
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.IsExistRecordAsyn(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据查询条件，判断是否存在记录（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.GetFieldTypeList">
            <summary>
            获取表的字段名称和数据类型列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.GetColumnNameAlias">
            <summary>
            获取字段中文别名（用于界面显示）的字典集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.GetFieldList(System.String)">
            <summary>
            获取某字段数据字典列表
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseWCFService`2.GetReportData(System.String,System.String)">
            <summary>
            获取指定字段的报表数据
            </summary>
            <param name="fieldName">表字段</param>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="T:WHC.Framework.EF.BaseLocalService`2">
            <summary>
            基于本地业务类的基础API包装类
            </summary>
            <typeparam name="DTO">数据传输对象，用于界面处理层</typeparam>
            <typeparam name="Entity">数据实体对象，用于数据存储</typeparam>
        </member>
        <member name="F:WHC.Framework.EF.BaseLocalService`2.baseBLL">
            <summary>
            基础业务对象
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.#ctor(WHC.Framework.EF.IBaseBLL{`1})">
            <summary>
            使用业务对象构造对象
            </summary>
            <param name="bll"></param>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.ConvertExpression(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            转换DTO的条件表达式为EF的数据条件表达式
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.Insert(`0)">
            <summary>
            插入指定对象到数据库中
            </summary>
            <param name="dto">指定的对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.InsertAsync(`0)">
            <summary>
            插入指定对象到数据库中（异步）
            </summary>
            <param name="dto">指定的对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.InsertRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入指定对象集合到数据库中
            </summary>
            <param name="list">指定的对象集合</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.InsertRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入指定对象集合到数据库中（异步）
            </summary>
            <param name="list">指定的对象集合</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.Update(`0,System.Object)">
            <summary>
            更新对象属性到数据库中
            </summary>
            <param name="dto">指定的对象</param>
            <param name="key">主键的值</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.UpdateAsync(`0,System.Object)">
            <summary>
            更新对象属性到数据库中（异步）
            </summary>
            <param name="dto">指定的对象</param>
            <param name="key">主键的值</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.Delete(System.Object)">
            <summary>
            根据指定对象的ID,从数据库中删除指定对象
            </summary>
            <param name="id">对象的ID</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.DeleteAsync(System.Object)">
            <summary>
            根据指定对象的ID,从数据库中删除指定对象（异步）
            </summary>
            <param name="id">对象的ID</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.Delete(`0)">
            <summary>
            从数据库中删除指定对象
            </summary>
            <param name="dto">指定对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.DeleteAsync(`0)">
            <summary>
            从数据库中删除指定对象（异步）
            </summary>
            <param name="dto">指定对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.DeleteByExpression(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据指定条件,从数据库中删除指定对象
            </summary>
            <param name="match">条件表达式</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.DeleteByExpressionAsync(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据指定条件,从数据库中删除指定对象（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.DeleteByCondition(System.String)">
            <summary>
            根据指定条件,从数据库中删除指定对象
            </summary>
            <param name="condition">删除记录的条件语句</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.DeleteByConditionAsync(System.String)">
            <summary>
            根据指定条件,从数据库中删除指定对象（异步）
            </summary>
            <param name="condition">删除记录的条件语句</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.FindByID(System.Object)">
            <summary>
            查询数据库,返回指定ID的对象
            </summary>
            <param name="id">ID主键的值</param>
            <returns>存在则返回指定的对象,否则返回Null</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.FindByIDAsync(System.Object)">
            <summary>
            查询数据库,返回指定ID的对象（异步）
            </summary>
            <param name="id">ID主键的值</param>
            <returns>存在则返回指定的对象,否则返回Null</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.FindSingle(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件查询数据库,如果存在返回第一个对象
            </summary>
            <param name="match">条件表达式</param>
            <returns>存在则返回指定的第一个对象,否则返回默认值</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.FindSingleAsync(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件查询数据库,如果存在返回第一个对象（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns>存在则返回指定的第一个对象,否则返回默认值</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.GetAll">
            <summary>
            返回数据库所有的对象集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.GetAllAsync">
            <summary>
            返回数据库所有的对象集合（异步）
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.GetAllWithPager(WHC.Pager.Entity.PagerInfo@)">
            <summary>
            返回数据库所有的对象集合(用于分页数据显示)
            </summary>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.Find(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件查询数据库,并返回对象集合
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.FindAsync(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件查询数据库,并返回对象集合(异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.FindWithPager(Serialize.Linq.Nodes.ExpressionNode,WHC.Pager.Entity.PagerInfo@)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="match">条件表达式</param>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.GetRecordCount">
            <summary>
            获取表的所有记录数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.GetRecordCountAsync">
            <summary>
            获取表的所有记录数量（异步）
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.GetRecordCount(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件获取表记录的数量
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.GetRecordCountAsync(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据条件获取表记录的数量（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.IsExistRecord(System.Object)">
            <summary>
            根据主键ID，判断是否存在记录
            </summary>
            <param name="id">对象的ID</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.IsExistRecordAsyn(System.Object)">
            <summary>
            根据主键ID，判断是否存在记录（异步）
            </summary>
            <param name="id">对象的ID</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.IsExistRecord(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据查询条件，判断是否存在记录
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.IsExistRecordAsyn(Serialize.Linq.Nodes.ExpressionNode)">
            <summary>
            根据查询条件，判断是否存在记录（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.GetFieldTypeList">
            <summary>
            获取表的字段名称和数据类型列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.GetColumnNameAlias">
            <summary>
            获取字段中文别名（用于界面显示）的字典集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.GetFieldList(System.String)">
            <summary>
            获取某字段数据字典列表
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseLocalService`2.GetReportData(System.String,System.String)">
            <summary>
            获取指定字段的报表数据
            </summary>
            <param name="fieldName">表字段</param>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="T:WHC.Framework.EF.IFactory">
            <summary>
            基于IOC容器的接口工厂类
            </summary>
        </member>
        <member name="F:WHC.Framework.EF.IFactory.container">
            <summary>
            IOC的容器，可调用来获取对应接口实例。
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.IFactory.Instance``1">
            <summary>
            根据接口类型获取接口的实现实例
            </summary>
            <typeparam name="T">接口类型，如ICityBLL</typeparam>
            <returns></returns>
        </member>
        <member name="T:WHC.Framework.EF.ArgumentValidation">
            <summary>
            参数验证的通用校验辅助类
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.ArgumentValidation.CheckForEmptyString(System.String,System.String)">
            <summary>
            <para>检查参数<paramref name="variable"/>是否为空字符串。</para>
            </summary>
            <param name="variable">待检查的值</param>
            <param name="variableName">参数的名称</param>
        </member>
        <member name="M:WHC.Framework.EF.ArgumentValidation.CheckForNullReference(System.Object,System.String)">
            <summary>
            <para>检查参数<paramref name="variable"/>是否为空引用(Null)。</para>
            </summary>
            <param name="variable">待检查的值</param>
            <param name="variableName">待检查变量的名称</param>
        </member>
        <member name="M:WHC.Framework.EF.ArgumentValidation.CheckForInvalidNullNameReference(System.String,System.String)">
            <summary>
            验证输入的参数messageName非空字符串，也非空引用
            </summary>
            <param name="name">参数名称</param>
            <param name="messageName">参数的值</param>
        </member>
        <member name="M:WHC.Framework.EF.ArgumentValidation.CheckForZeroBytes(System.Byte[],System.String)">
            <summary>
            <para>验证参数<paramref name="bytes"/>非零长度，如果为零长度，则抛出异常<see cref="T:System.ArgumentException"/>。</para>
            </summary>
            <param name="bytes">待检查的字节数组</param>
            <param name="variableName">待检查参数的名称</param>
        </member>
        <member name="M:WHC.Framework.EF.ArgumentValidation.CheckExpectedType(System.Object,System.Type)">
            <summary>
            <para>检查参数<paramref name="variable"/>是否符合指定的类型。</para>
            </summary>
            <param name="variable">待检查的值</param>
            <param name="type">参数variable的类型</param>
        </member>
        <member name="M:WHC.Framework.EF.ArgumentValidation.CheckEnumeration(System.Type,System.Object,System.String)">
            <summary>
            检查variable是否一个有效的<paramref name="enumType"/>枚举类型
            </summary>
            <param name="variable">待检查的值</param>
            <param name="enumType">参数variable的枚举类型</param>
            <param name="variableName">变量variable的名称</param>
        </member>
        <member name="T:WHC.Framework.EF.BaseBLL`1">
            <summary>
            业务逻辑基类
            </summary>
            <typeparam name="T">实体对象类型</typeparam>
        </member>
        <member name="T:WHC.Framework.EF.IBaseBLL`1">
            <summary>
            业务逻辑层基类接口
            </summary>
            <typeparam name="T">实体对象类型</typeparam>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.Insert(`0)">
            <summary>
            插入指定对象到数据库中
            </summary>
            <param name="t">指定的对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.InsertAsync(`0)">
            <summary>
            插入指定对象到数据库中（异步）
            </summary>
            <param name="t">指定的对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.InsertRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入指定对象集合到数据库中
            </summary>
            <param name="list">指定的对象集合</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.InsertRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入指定对象集合到数据库中（异步）
            </summary>
            <param name="list">指定的对象集合</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.Update(`0,System.Object)">
            <summary>
            更新对象属性到数据库中
            </summary>
            <param name="t">指定的对象</param>
            <param name="key">主键的值</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.UpdateAsync(`0,System.Object)">
            <summary>
            更新对象属性到数据库中（异步）
            </summary>
            <param name="t">指定的对象</param>
            <param name="key">主键的值</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.Delete(System.Object)">
            <summary>
            根据指定对象的ID,从数据库中删除指定对象
            </summary>
            <param name="id">对象的ID</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.DeleteAsync(System.Object)">
            <summary>
            根据指定对象的ID,从数据库中删除指定对象（异步）
            </summary>
            <param name="id">对象的ID</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.Delete(`0)">
            <summary>
            从数据库中删除指定对象
            </summary>
            <param name="t">指定对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.DeleteAsync(`0)">
            <summary>
            从数据库中删除指定对象（异步）
            </summary>
            <param name="t">指定对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.DeleteByExpression(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据指定条件,从数据库中删除指定对象
            </summary>
            <param name="match">条件表达式</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.DeleteByExpressionAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据指定条件,从数据库中删除指定对象（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.DeleteByCondition(System.String)">
            <summary>
            根据指定条件,从数据库中删除指定对象
            </summary>
            <param name="condition">删除记录的条件语句</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.DeleteByConditionAsync(System.String)">
            <summary>
            根据指定条件,从数据库中删除指定对象（异步）
            </summary>
            <param name="condition">删除记录的条件语句</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.FindByID(System.Object)">
            <summary>
            查询数据库,返回指定ID的对象
            </summary>
            <param name="id">ID主键的值</param>
            <returns>存在则返回指定的对象,否则返回Null</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.FindByIDAsync(System.Object)">
            <summary>
            查询数据库,返回指定ID的对象（异步）
            </summary>
            <param name="id">ID主键的值</param>
            <returns>存在则返回指定的对象,否则返回Null</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.FindSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查询数据库,如果存在返回第一个对象
            </summary>
            <param name="match">条件表达式</param>
            <returns>存在则返回指定的第一个对象,否则返回默认值</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.FindSingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查询数据库,如果存在返回第一个对象（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns>存在则返回指定的第一个对象,否则返回默认值</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetQueryable">
            <summary>
            返回可查询的记录源
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean)">
            <summary>
            根据条件表达式返回可查询的记录源
            </summary>
            <param name="match">查询条件</param>
            <param name="sortPropertyName">排序属性名称</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetQueryable``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            根据条件表达式返回可查询的记录源
            </summary>
            <param name="match">查询条件</param>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetAll">
            <summary>
            返回数据库所有的对象集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetAllAsync">
            <summary>
            返回数据库所有的对象集合（异步）
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            返回数据库所有的对象集合
            </summary>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetAllAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            返回数据库所有的对象集合（异步）
            </summary>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetAllWithPager(WHC.Pager.Entity.PagerInfo)">
            <summary>
            返回数据库所有的对象集合(用于分页数据显示)
            </summary>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetAllWithPagerAsync(WHC.Pager.Entity.PagerInfo)">
            <summary>
            返回数据库所有的对象集合(用于分页数据显示,异步)
            </summary>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查询数据库,并返回对象集合
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查询数据库,并返回对象集合(异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            根据条件查询数据库,并返回对象集合
            </summary>
            <param name="match">条件表达式</param>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.FindAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            根据条件查询数据库,并返回对象集合(异步）
            </summary>
            <param name="match">条件表达式</param>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.FindWithPager(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},WHC.Pager.Entity.PagerInfo)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="match">条件表达式</param>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.FindWithPager``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},WHC.Pager.Entity.PagerInfo,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="match">条件表达式</param>
            <param name="info">分页实体</param>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetRecordCount">
            <summary>
            获取表的所有记录数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetRecordCountAsync">
            <summary>
            获取表的所有记录数量（异步）
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetRecordCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取表记录的数量
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetRecordCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取表记录的数量（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.IsExistRecord(System.Object)">
            <summary>
            根据主键ID，判断是否存在记录
            </summary>
            <param name="id">对象的ID</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.IsExistRecordAsyn(System.Object)">
            <summary>
            根据主键ID，判断是否存在记录（异步）
            </summary>
            <param name="id">对象的ID</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.IsExistRecord(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据查询条件，判断是否存在记录
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.IsExistRecordAsyn(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据查询条件，判断是否存在记录（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.SqlExecute(System.String,System.Object[])">
            <summary>
            执行一些特殊的语句
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">要应用于命令字符串的参数</param>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.SqlValueList(System.String,System.Object[])">
            <summary>
            执行SQL查询语句，返回查询结果的所有记录的第一个字段,用逗号分隔。
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">要应用于命令字符串的参数</param>
            <returns>
            返回查询结果的所有记录的第一个字段,用逗号分隔。
            </returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.SqlTable(System.String,System.Object[])">
            <summary>
            执行SQL查询语句，返回查询结果为DataTable
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">要应用于命令字符串的参数</param>
            <returns>
            返回查询结果为DataTable
            </returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetFieldTypeList">
            <summary>
            获取表的字段名称和数据类型列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetColumnNameAlias">
            <summary>
            获取字段中文别名（用于界面显示）的字典集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetFieldList(System.String)">
            <summary>
            获取某字段数据字典列表
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetFieldList(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            获取某字段数据字典列表
            </summary>
            <param name="fieldNameKey">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseBLL`1.GetReportData(System.String,System.String)">
            <summary>
            获取指定字段的报表数据
            </summary>
            <param name="fieldName">表字段</param>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.#ctor">
            <summary>
            默认构造函数。
            默认获取缓存的容器，如果没有则创建容器，并注册所需的接口实现。
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.#ctor(WHC.Framework.EF.IBaseDAL{`0})">
            <summary>
            参数化构造函数，传入具体的数据访问接口
            </summary>
            <param name="dal">数据访问接口</param>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.Insert(`0)">
            <summary>
            插入指定对象到数据库中
            </summary>
            <param name="t">指定的对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.InsertAsync(`0)">
            <summary>
            插入指定对象到数据库中（异步）
            </summary>
            <param name="t">指定的对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.InsertRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入指定对象集合到数据库中
            </summary>
            <param name="list">指定的对象集合</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.InsertRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入指定对象集合到数据库中（异步）
            </summary>
            <param name="list">指定的对象集合</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.Update(`0,System.Object)">
            <summary>
            更新对象属性到数据库中
            </summary>
            <param name="t">指定的对象</param>
            <param name="key">主键的值</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.UpdateAsync(`0,System.Object)">
            <summary>
            更新对象属性到数据库中（异步）
            </summary>
            <param name="t">指定的对象</param>
            <param name="key">主键的值</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.Delete(System.Object)">
            <summary>
            根据指定对象的ID,从数据库中删除指定对象
            </summary>
            <param name="id">对象的ID</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.DeleteAsync(System.Object)">
            <summary>
            根据指定对象的ID,从数据库中删除指定对象（异步）
            </summary>
            <param name="id">对象的ID</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.Delete(`0)">
            <summary>
            从数据库中删除指定对象
            </summary>
            <param name="t">指定对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.DeleteAsync(`0)">
            <summary>
            从数据库中删除指定对象（异步）
            </summary>
            <param name="t">指定对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.DeleteByExpression(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据指定条件,从数据库中删除指定对象
            </summary>
            <param name="match">条件表达式</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.DeleteByExpressionAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据指定条件,从数据库中删除指定对象（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.DeleteByCondition(System.String)">
            <summary>
            根据指定条件,从数据库中删除指定对象
            </summary>
            <param name="condition">删除记录的条件语句</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.DeleteByConditionAsync(System.String)">
            <summary>
            根据指定条件,从数据库中删除指定对象（异步）
            </summary>
            <param name="condition">删除记录的条件语句</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.FindByID(System.Object)">
            <summary>
            查询数据库,返回指定ID的对象
            </summary>
            <param name="id">ID主键的值</param>
            <returns>存在则返回指定的对象,否则返回Null</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.FindByIDAsync(System.Object)">
            <summary>
            查询数据库,返回指定ID的对象（异步）
            </summary>
            <param name="id">ID主键的值</param>
            <returns>存在则返回指定的对象,否则返回Null</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.FindSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查询数据库,如果存在返回第一个对象
            </summary>
            <param name="match">条件表达式</param>
            <returns>存在则返回指定的第一个对象,否则返回默认值</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.FindSingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查询数据库,如果存在返回第一个对象（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns>存在则返回指定的第一个对象,否则返回默认值</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetQueryable">
            <summary>
            返回可查询的记录源
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean)">
            <summary>
            根据条件表达式返回可查询的记录源
            </summary>
            <param name="match">查询条件</param>
            <param name="sortPropertyName">排序属性名称</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetQueryable``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            根据条件表达式返回可查询的记录源
            </summary>
            <param name="match">查询条件</param>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetAll">
            <summary>
            返回数据库所有的对象集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetAllAsync">
            <summary>
            返回数据库所有的对象集合（异步）
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            返回数据库所有的对象集合
            </summary>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetAllAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            返回数据库所有的对象集合（异步）
            </summary>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetAllWithPager(WHC.Pager.Entity.PagerInfo)">
            <summary>
            返回数据库所有的对象集合(用于分页数据显示)
            </summary>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetAllWithPagerAsync(WHC.Pager.Entity.PagerInfo)">
            <summary>
            返回数据库所有的对象集合(用于分页数据显示,异步)
            </summary>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查询数据库,并返回对象集合
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查询数据库,并返回对象集合(异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            根据条件查询数据库,并返回对象集合
            </summary>
            <param name="match">条件表达式</param>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.FindAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            根据条件查询数据库,并返回对象集合(异步）
            </summary>
            <param name="match">条件表达式</param>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.FindWithPager(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},WHC.Pager.Entity.PagerInfo)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="match">条件表达式</param>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.FindWithPagerAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},WHC.Pager.Entity.PagerInfo)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示,异步)
            </summary>
            <param name="match">条件表达式</param>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.FindWithPager``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},WHC.Pager.Entity.PagerInfo,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="match">条件表达式</param>
            <param name="info">分页实体</param>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetRecordCount">
            <summary>
            获取表的所有记录数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetRecordCountAsync">
            <summary>
            获取表的所有记录数量（异步）
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetRecordCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取表记录的数量
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetRecordCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取表记录的数量（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.IsExistRecord(System.Object)">
            <summary>
            根据主键ID，判断是否存在记录
            </summary>
            <param name="id">对象的ID</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.IsExistRecordAsyn(System.Object)">
            <summary>
            根据主键ID，判断是否存在记录（异步）
            </summary>
            <param name="id">对象的ID</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.IsExistRecord(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据查询条件，判断是否存在记录
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.IsExistRecordAsyn(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据查询条件，判断是否存在记录（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.SqlExecute(System.String,System.Object[])">
            <summary>
            执行一些特殊的语句
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">要应用于命令字符串的参数</param>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.SqlValueList(System.String,System.Object[])">
            <summary>
            执行SQL查询语句，返回查询结果的所有记录的第一个字段,用逗号分隔。
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">要应用于命令字符串的参数</param>
            <returns>
            返回查询结果的所有记录的第一个字段,用逗号分隔。
            </returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.SqlTable(System.String,System.Object[])">
            <summary>
            执行SQL查询语句，返回查询结果为DataTable
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">要应用于命令字符串的参数</param>
            <returns>
            返回查询结果为DataTable
            </returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetFieldTypeList">
            <summary>
            获取表的字段名称和数据类型列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetColumnNameAlias">
            <summary>
            获取字段中文别名（用于界面显示）的字典集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetFieldList(System.String)">
            <summary>
            获取某字段数据字典列表
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetFieldList(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            获取某字段数据字典列表
            </summary>
            <param name="fieldNameKey">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseBLL`1.GetReportData(System.String,System.String)">
            <summary>
            获取指定字段的报表数据
            </summary>
            <param name="fieldName">表字段</param>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="P:WHC.Framework.EF.BaseBLL`1.baseDAL">
            <summary>
            基类的通用数据访问接口
            </summary>
        </member>
        <member name="P:WHC.Framework.EF.BaseBLL`1.container">
            <summary>
            IOC的容器
            </summary>
        </member>
        <member name="T:WHC.Framework.EF.AutoMapperHelper">
            <summary>
            AutoMapper扩展帮助类。
            <code>
            <![CDATA[
            对象映射:
                ShipInfoModel  shipInfoModel =  ShipInfo.MapTo<ShipInfoModel>();
            列表映射:
                List<ShipInfoModel> shipInfoModellist = ShipInfoList.MapToList<ShipInfoModel>();
            ]]>
            </code>
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.AutoMapperHelper.MapTo``1(System.Object)">
            <summary>
             类型映射
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.AutoMapperHelper.MapToList``1(System.Collections.IEnumerable)">
            <summary>
            集合列表类型映射
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.AutoMapperHelper.MapToList``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            集合列表类型映射
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.AutoMapperHelper.MapToList``2(System.Linq.IQueryable{``0})">
            <summary>
            集合列表类型映射
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.AutoMapperHelper.MapTo``2(``0,``1)">
            <summary>
            类型映射
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.AutoMapperHelper.DataReaderMapTo``1(System.Data.IDataReader)">
            <summary>
            DataReader映射
            </summary>
        </member>
        <member name="T:WHC.Framework.EF.ParameterReplacer">
            <summary>
            参数替换辅助类
            </summary>
        </member>
        <member name="T:WHC.Framework.EF.FunctionCompositionExtensions">
            <summary>
            Lambda表达式的扩展函数
            </summary>
        </member>
        <member name="T:WHC.Framework.EF.BaseContext">
            <summary>
            数据库操作上下文基类。为了减少子类的处理操作，抽象一个数据库操作上下文对象。
            </summary>
        </member>
        <member name="F:WHC.Framework.EF.BaseContext.defaultConnectStr">
            <summary>
            自动从配置信息里获取对应的连接字符串对象
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.BaseContext.#ctor(System.Reflection.Assembly)">
            <summary>
            动态的构造函数。动态从连接字符串里面构造对应的数据库连接。
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.BaseContext.GetConnectionString">
            <summary>
            通过代码方式，获取连接字符对象并返回。
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            模型创建的处理事件，用于生成实体数据模型（EDM）。
            重写代码，实现从程序集里面自动构建对应的关系，如字段映射，表之间关系等。
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.BaseContext.ConvertProviderNameToSuffix(System.String)">
            <summary>
            转换数据库的提供者名称到映射类的命名空间后缀
            </summary>
            <param name="providerName">数据库的提供者名称</param>
            <returns></returns>
        </member>
        <member name="P:WHC.Framework.EF.BaseContext.assembly">
            <summary>
            实体数据映射类对象所在的程序集。
            </summary>
        </member>
        <member name="T:WHC.Framework.EF.BaseDAL`1">
            <summary>
            数据访问层基类
            </summary>
            <typeparam name="T">实体对象类型</typeparam>
        </member>
        <member name="T:WHC.Framework.EF.IBaseDAL`1">
            <summary>
            数据访问层基类接口
            </summary>
            <typeparam name="T">实体对象类型</typeparam>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.Insert(`0)">
            <summary>
            插入指定对象到数据库中
            </summary>
            <param name="t">指定的对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.InsertAsync(`0)">
            <summary>
            插入指定对象到数据库中（异步）
            </summary>
            <param name="t">指定的对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.InsertRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入指定对象集合到数据库中
            </summary>
            <param name="list">指定的对象集合</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.InsertRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入指定对象集合到数据库中（异步）
            </summary>
            <param name="list">指定的对象集合</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.Update(`0,System.Object)">
            <summary>
            更新对象属性到数据库中
            </summary>
            <param name="t">指定的对象</param>
            <param name="key">主键的值</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.UpdateAsync(`0,System.Object)">
            <summary>
            更新对象属性到数据库中（异步）
            </summary>
            <param name="t">指定的对象</param>
            <param name="key">主键的值</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.Delete(System.Object)">
            <summary>
            根据指定对象的ID,从数据库中删除指定对象
            </summary>
            <param name="id">对象的ID</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.DeleteAsync(System.Object)">
            <summary>
            根据指定对象的ID,从数据库中删除指定对象（异步）
            </summary>
            <param name="id">对象的ID</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.Delete(`0)">
            <summary>
            从数据库中删除指定对象
            </summary>
            <param name="t">指定对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.DeleteAsync(`0)">
            <summary>
            从数据库中删除指定对象（异步）
            </summary>
            <param name="t">指定对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.DeleteByExpression(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据指定条件,从数据库中删除指定对象
            </summary>
            <param name="match">条件表达式</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.DeleteByExpressionAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据指定条件,从数据库中删除指定对象（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.DeleteByCondition(System.String)">
            <summary>
            根据指定条件,从数据库中删除指定对象
            </summary>
            <param name="condition">删除记录的条件语句</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.DeleteByConditionAsync(System.String)">
            <summary>
            根据指定条件,从数据库中删除指定对象（异步）
            </summary>
            <param name="condition">删除记录的条件语句</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.FindByID(System.Object)">
            <summary>
            查询数据库,返回指定ID的对象
            </summary>
            <param name="id">ID主键的值</param>
            <returns>存在则返回指定的对象,否则返回Null</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.FindByIDAsync(System.Object)">
            <summary>
            查询数据库,返回指定ID的对象（异步）
            </summary>
            <param name="id">ID主键的值</param>
            <returns>存在则返回指定的对象,否则返回Null</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.FindSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查询数据库,如果存在返回第一个对象
            </summary>
            <param name="match">条件表达式</param>
            <returns>存在则返回指定的第一个对象,否则返回默认值</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.FindSingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查询数据库,如果存在返回第一个对象（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns>存在则返回指定的第一个对象,否则返回默认值</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetQueryable">
            <summary>
            返回可查询的记录源
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean)">
            <summary>
            根据条件表达式返回可查询的记录源
            </summary>
            <param name="match">查询条件</param>
            <param name="sortPropertyName">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetQueryable``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            根据条件表达式返回可查询的记录源
            </summary>
            <param name="match">查询条件</param>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetAll">
            <summary>
            返回数据库所有的对象集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetAllAsync">
            <summary>
            返回数据库所有的对象集合（异步）
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            返回数据库所有的对象集合
            </summary>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetAllAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            返回数据库所有的对象集合（异步）
            </summary>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetAllWithPager(WHC.Pager.Entity.PagerInfo)">
            <summary>
            返回数据库所有的对象集合(用于分页数据显示)
            </summary>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetAllWithPagerAsync(WHC.Pager.Entity.PagerInfo)">
            <summary>
            返回数据库所有的对象集合(用于分页数据显示,异步)
            </summary>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查询数据库,并返回对象集合
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查询数据库,并返回对象集合(异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            根据条件查询数据库,并返回对象集合
            </summary>
            <param name="match">条件表达式</param>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.FindAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            根据条件查询数据库,并返回对象集合(异步）
            </summary>
            <param name="match">条件表达式</param>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.FindWithPager(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},WHC.Pager.Entity.PagerInfo)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="match">条件表达式</param>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.FindWithPagerAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},WHC.Pager.Entity.PagerInfo)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示,异步)
            </summary>
            <param name="match">条件表达式</param>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.FindWithPager``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},WHC.Pager.Entity.PagerInfo,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="match">条件表达式</param>
            <param name="info">分页实体</param>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetRecordCount">
            <summary>
            获取表的所有记录数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetRecordCountAsync">
            <summary>
            获取表的所有记录数量（异步）
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetRecordCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取表记录的数量
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetRecordCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取表记录的数量（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.IsExistRecord(System.Object)">
            <summary>
            根据主键ID，判断是否存在记录
            </summary>
            <param name="id">对象的ID</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.IsExistRecordAsyn(System.Object)">
            <summary>
            根据主键ID，判断是否存在记录（异步）
            </summary>
            <param name="id">对象的ID</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.IsExistRecord(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据查询条件，判断是否存在记录
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.IsExistRecordAsyn(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据查询条件，判断是否存在记录（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.SqlExecute(System.String,System.Object[])">
            <summary>
            执行一些特殊的语句
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">要应用于命令字符串的参数</param>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.SqlValueList(System.String,System.Object[])">
            <summary>
            执行SQL查询语句，返回查询结果的所有记录的第一个字段,用逗号分隔。
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">要应用于命令字符串的参数</param>
            <returns>
            返回查询结果的所有记录的第一个字段,用逗号分隔。
            </returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.SqlTable(System.String,System.Object[])">
            <summary>
            执行SQL查询语句，返回查询结果为DataTable
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">要应用于命令字符串的参数</param>
            <returns>
            返回查询结果为DataTable
            </returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetFieldTypeList">
            <summary>
            获取表的字段名称和数据类型列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetColumnNameAlias">
            <summary>
            获取字段中文别名（用于界面显示）的字典集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetFieldList(System.String)">
            <summary>
            获取某字段数据字典列表
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetFieldList(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            获取某字段数据字典列表
            </summary>
            <param name="fieldNameKey">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.IBaseDAL`1.GetReportData(System.String,System.String)">
            <summary>
            获取指定字段的报表数据
            </summary>
            <param name="fieldName">表字段</param>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="F:WHC.Framework.EF.BaseDAL`1.baseContext">
            <summary>
            DbContext对象
            </summary>
        </member>
        <member name="F:WHC.Framework.EF.BaseDAL`1.objectSet">
            <summary>
            指定类型的实体对象集合
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.#ctor(System.Data.Entity.DbContext)">
            <summary>
            参数化构造函数
            </summary>
            <param name="context">DbContext对象</param>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.Insert(`0)">
            <summary>
            插入指定对象到数据库中
            </summary>
            <param name="t">指定的对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.InsertAsync(`0)">
            <summary>
            插入指定对象到数据库中（异步）
            </summary>
            <param name="t">指定的对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.InsertRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入指定对象集合到数据库中
            </summary>
            <param name="list">指定的对象集合</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.InsertRangeAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            插入指定对象集合到数据库中（异步）
            </summary>
            <param name="list">指定的对象集合</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.Update(`0,System.Object)">
            <summary>
            更新对象属性到数据库中
            </summary>
            <param name="t">指定的对象</param>
            <param name="key">主键的值</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.UpdateAsync(`0,System.Object)">
            <summary>
            更新对象属性到数据库中（异步）
            </summary>
            <param name="t">指定的对象</param>
            <param name="key">主键的值</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.Delete(System.Object)">
            <summary>
            根据指定对象的ID,从数据库中删除指定对象
            </summary>
            <param name="id">对象的ID</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.DeleteAsync(System.Object)">
            <summary>
            根据指定对象的ID,从数据库中删除指定对象（异步）
            </summary>
            <param name="id">对象的ID</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.Delete(`0)">
            <summary>
            从数据库中删除指定对象
            </summary>
            <param name="t">指定对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.DeleteAsync(`0)">
            <summary>
            从数据库中删除指定对象（异步）
            </summary>
            <param name="t">指定对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.DeleteByExpression(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据指定条件,从数据库中删除指定对象
            </summary>
            <param name="match">条件表达式</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.DeleteByExpressionAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据指定条件,从数据库中删除指定对象（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.DeleteByCondition(System.String)">
            <summary>
            根据指定条件,从数据库中删除指定对象
            </summary>
            <param name="condition">删除记录的条件语句</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.DeleteByConditionAsync(System.String)">
            <summary>
            根据指定条件,从数据库中删除指定对象（异步）
            </summary>
            <param name="condition">删除记录的条件语句</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.FindByID(System.Object)">
            <summary>
            查询数据库,返回指定ID的对象
            </summary>
            <param name="id">ID主键的值</param>
            <returns>存在则返回指定的对象,否则返回Null</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.FindByIDAsync(System.Object)">
            <summary>
            查询数据库,返回指定ID的对象（异步）
            </summary>
            <param name="id">ID主键的值</param>
            <returns>存在则返回指定的对象,否则返回Null</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.FindSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查询数据库,如果存在返回第一个对象
            </summary>
            <param name="match">条件表达式</param>
            <returns>存在则返回指定的第一个对象,否则返回默认值</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.FindSingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查询数据库,如果存在返回第一个对象（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns>存在则返回指定的第一个对象,否则返回默认值</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetQueryable">
            <summary>
            返回可查询的记录源
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetQueryable(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean)">
            <summary>
            根据条件表达式返回可查询的记录源
            </summary>
            <param name="match">查询条件</param>
            <param name="sortPropertyName">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetQueryable``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            根据条件表达式返回可查询的记录源
            </summary>
            <param name="match">查询条件</param>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetAll">
            <summary>
            返回数据库所有的对象集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetAllAsync">
            <summary>
            返回数据库所有的对象集合（异步）
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            返回数据库所有的对象集合
            </summary>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetAllAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            返回数据库所有的对象集合（异步）
            </summary>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetAllWithPager(WHC.Pager.Entity.PagerInfo)">
            <summary>
            返回数据库所有的对象集合(用于分页数据显示)
            </summary>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetAllWithPagerAsync(WHC.Pager.Entity.PagerInfo)">
            <summary>
            返回数据库所有的对象集合(用于分页数据显示,异步)
            </summary>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查询数据库,并返回对象集合
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.FindAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件查询数据库,并返回对象集合(异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.Find``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            根据条件查询数据库,并返回对象集合
            </summary>
            <param name="match">条件表达式</param>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.FindAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            根据条件查询数据库,并返回对象集合(异步）
            </summary>
            <param name="match">条件表达式</param>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.FindWithPager(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},WHC.Pager.Entity.PagerInfo)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="match">条件表达式</param>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.FindWithPagerAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},WHC.Pager.Entity.PagerInfo)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示,异步)
            </summary>
            <param name="match">条件表达式</param>
            <param name="info">分页实体</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.FindWithPager``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},WHC.Pager.Entity.PagerInfo,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="match">条件表达式</param>
            <param name="info">分页实体</param>
            <param name="orderByProperty">排序表达式</param>
            <param name="isDescending">如果为true则为降序，否则为升序</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetRecordCount">
            <summary>
            获取表的所有记录数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetRecordCountAsync">
            <summary>
            获取表的所有记录数量（异步）
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetRecordCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取表记录的数量
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetRecordCountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件获取表记录的数量（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.IsExistRecord(System.Object)">
            <summary>
            根据主键ID，判断是否存在记录
            </summary>
            <param name="id">对象的ID</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.IsExistRecordAsyn(System.Object)">
            <summary>
            根据主键ID，判断是否存在记录（异步）
            </summary>
            <param name="id">对象的ID</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.IsExistRecord(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据查询条件，判断是否存在记录
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.IsExistRecordAsyn(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据查询条件，判断是否存在记录（异步）
            </summary>
            <param name="match">条件表达式</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetColumnNameAlias">
            <summary>
            获取字段中文别名（用于界面显示）的字典集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetFieldList(System.String)">
            <summary>
            获取某字段数据字典列表
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetFieldList(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            获取某字段数据字典列表
            </summary>
            <param name="fieldNameKey">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.SqlExecute(System.String,System.Object[])">
            <summary>
            执行一些特殊的语句
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">要应用于命令字符串的参数</param>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.SqlValueList(System.String,System.Object[])">
            <summary>
            执行SQL查询语句，返回查询结果的所有记录的第一个字段,用逗号分隔。
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">要应用于命令字符串的参数</param>
            <returns>
            返回查询结果的所有记录的第一个字段,用逗号分隔。
            </returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.SqlTable(System.String,System.Object[])">
            <summary>
            执行SQL查询语句，返回查询结果为DataTable
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">要应用于命令字符串的参数</param>
            <returns>
            返回查询结果为DataTable
            </returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetFieldTypeList">
            <summary>
            获取表的字段名称和数据类型列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetReaderSchema(System.String)">
            <summary>
            获取指定表的元数据，包括字段名称、类型等等
            </summary>
            <param name="tableName">数据库表名</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetReportData(System.String,System.String)">
            <summary>
            获取指定字段的报表数据
            </summary>
            <param name="fieldName">表字段</param>
            <param name="condition">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.HasInjectionData(System.String)">
            <summary>
            验证是否存在注入代码(条件语句）
            </summary>
            <param name="inputData"></param>
        </member>
        <member name="M:WHC.Framework.EF.BaseDAL`1.GetRegexString">
            <summary>
            获取正则表达式
            </summary>
            <returns></returns>
        </member>
        <member name="P:WHC.Framework.EF.BaseDAL`1.IsDescending">
            <summary>
            是否为降序
            </summary>
        </member>
        <member name="P:WHC.Framework.EF.BaseDAL`1.SortPropertyName">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="T:WHC.Framework.EF.BLLFactory`1">
            <summary>
            对业务类进行构造的工厂类
            </summary>
            <typeparam name="T">业务对象类型</typeparam>
        </member>
        <member name="P:WHC.Framework.EF.BLLFactory`1.Instance">
            <summary>
            创建或者从缓存中获取对应业务类的实例
            </summary>
        </member>
        <member name="T:WHC.Framework.EF.DALFactory">
            <summary>
            实体框架的数据访问层接口的构造工厂。
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.DALFactory.GetInstance(System.Reflection.Assembly)">
            <summary>
            创建或者从缓存中获取对应业务类的实例
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.DALFactory.RegisterDAL(Microsoft.Practices.Unity.IUnityContainer,System.Reflection.Assembly)">
            <summary>
            使用Unity自动加载对应的IDAL接口的实现（DAL层）
            </summary>
            <param name="container">IOC容器</param>
            <param name="assembly">DAL所在程序集对象</param>
        </member>
        <member name="P:WHC.Framework.EF.DALFactory.Container">
            <summary>
            IOC的容器，可调用来获取对应接口实例。
            </summary>
        </member>
        <member name="T:WHC.Framework.EF.OrderByExtension">
            <summary>
            查询的扩展
            </summary>
        </member>
        <member name="M:WHC.Framework.EF.OrderByExtension.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Boolean)">
            <summary>
            增加对实体类属性的排序处理
            </summary>
        </member>
        <member name="T:WHC.Framework.EF.CallerFactory`1">
            <summary>
            混合式框架或WCF框架中针对不同调用方式的工厂类（WCF或者Win调用）
            </summary>
            <typeparam name="T">接口类型</typeparam>
        </member>
        <member name="M:WHC.Framework.EF.CallerFactory`1.CreateObject">
            <summary>
            根据配置参数CallerType的值，创建不同的调用方式实现接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.CallerFactory`1.LoadAssembly">
            <summary>
            创建程序集对象
            </summary>
        </member>
        <member name="P:WHC.Framework.EF.CallerFactory`1.Instance">
            <summary>
            创建或者从缓存中获取对应接口的实例
            </summary>
        </member>
        <member name="T:WHC.Framework.EF.CustomClientChannel`1">
            <summary>
            自定义的客户端信道(允许从自定义的配置文件中加载)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WHC.Framework.EF.CustomClientChannel`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="configurationPath">自定义配置文件路径</param>
        </member>
        <member name="M:WHC.Framework.EF.CustomClientChannel`1.#ctor(System.String,System.TimeSpan)">
            <summary>
            构造函数
            </summary>
            <param name="configurationPath">自定义配置文件路径</param>
            <param name="timeout">超时时间</param>
        </member>
        <member name="M:WHC.Framework.EF.CustomClientChannel`1.#ctor(System.ServiceModel.Channels.Binding,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="binding"></param>
            <param name="configurationPath">自定义配置文件路径</param>
        </member>
        <member name="M:WHC.Framework.EF.CustomClientChannel`1.#ctor(System.ServiceModel.Description.ServiceEndpoint,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="serviceEndpoint"></param>
            <param name="configurationPath">自定义配置文件路径</param>
        </member>
        <member name="M:WHC.Framework.EF.CustomClientChannel`1.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="endpointConfigurationName"></param>
            <param name="configurationPath">自定义配置文件路径</param>
        </member>
        <member name="M:WHC.Framework.EF.CustomClientChannel`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="binding"></param>
            <param name="endpointAddress"></param>
            <param name="configurationPath">自定义配置文件路径</param>
        </member>
        <member name="M:WHC.Framework.EF.CustomClientChannel`1.#ctor(System.ServiceModel.Channels.Binding,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="binding"></param>
            <param name="remoteAddress"></param>
            <param name="configurationPath">自定义配置文件路径</param>
        </member>
        <member name="M:WHC.Framework.EF.CustomClientChannel`1.#ctor(System.String,System.ServiceModel.EndpointAddress,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="endpointConfigurationName"></param>
            <param name="endpointAddress"></param>
            <param name="configurationPath">自定义配置文件路径</param>
        </member>
        <member name="M:WHC.Framework.EF.CustomClientChannel`1.CreateDescription">
            <summary>
            从指定的配置文件中加载服务终结点
            </summary>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.CustomClientChannel`1.CreateBinding(System.String,System.ServiceModel.Configuration.ServiceModelSectionGroup)">
            <summary>
            为所选择的终结点配置绑定
            </summary>
            <param name="bindingName"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.CustomClientChannel`1.GetBinding(System.ServiceModel.Configuration.IBindingConfigurationElement)">
            <summary>
            一些创建匹配绑定的方法
            </summary>
            <param name="configurationElement"></param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.CustomClientChannel`1.AddBehaviors(System.String,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Configuration.ServiceModelSectionGroup)">
            <summary>
            添加configured behavior 到所选择的终结点
            </summary>
            <param name="behaviorConfiguration"></param>
            <param name="serviceEndpoint"></param>
            <param name="group"></param>
        </member>
        <member name="M:WHC.Framework.EF.CustomClientChannel`1.GetIdentity(System.ServiceModel.Configuration.IdentityElement)">
            <summary>
            从配置文件重获取终结点的identity 
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:WHC.Framework.EF.CustomClientChannel`1.ApplyConfiguration(System.String)">
            <summary>
            应用配置内容
            </summary>
            <param name="configurationName">配置节点名称</param>
        </member>
    </members>
</doc>
